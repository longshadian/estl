CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS On)

PROJECT(CMAKE_TEST)
SET(main_src Main.cpp)
SET(OUTPUT main)
SET(OUTPUT_DIR ${CMAKE_BINARY_DIR}/output)

## 判断g++ vc++ 版本号，是否支持C++17
SET(MSVC_VERSION_MIN "1915")
#set(CMAKE_CXX_FLAGS "-std=c++17 ${CMAKE_CXX_FLAGS}")
IF(MSVC)
    IF(MSVC_VERSION STREQUAL ${MSVC_VERSION_MIN})
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17")
        #ADD_DEFINITIONS("/std:c++17")
        MESSAGE(STATUS "set CMAKE_CXX_FLAGS /std:c++17")
    ELSE()
        MESSAGE(FATAL_ERROR "MSVC_VERSION: ${MSVC_VERSION} not support std=c++17."
                "use Visual Studio 2017")
    ENDIF()
ENDIF()

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${CMAKE_HOME_DIRECTORY})
#INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/func)

FILE(GLOB src	*.cpp *.h)
SOURCE_GROUP("" FILES ${src})

FILE(GLOB src_func func/*.cpp func/*.h)
#SOURCE_GROUP(TREE ${PROJECT_SOURCE_DIR} PREFIX "src" FILES ${src_func})
SOURCE_GROUP(TREE ${PROJECT_SOURCE_DIR} FILES ${src_func})

FILE(GLOB src_func_ext func/ext/*.cpp func/ext/*.h)
#SOURCE_GROUP(TREE ${PROJECT_SOURCE_DIR} PREFIX "src" FILES ${src_func_ext})
SOURCE_GROUP(TREE ${PROJECT_SOURCE_DIR} FILES ${src_func_ext})

SET(ALL_SRC ${src} ${src_func} ${src_func_ext})

MESSAGE(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
MESSAGE(STATUS "CMAKE_HOME_DIRECTORY: ${CMAKE_HOME_DIRECTORY}")

INCLUDE(${CMAKE_HOME_DIRECTORY}/cmake/FindBoost.cmake)

MESSAGE("PROJECT_SOURCE_DIR: ${PROJECT_SOURCE_DIR}")
MESSAGE("CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
MESSAGE("CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")

IF(WIN32)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR}/debug/lib)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR}/debug/lib)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR}/debug/bin)

    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR}/release/lib)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR}/release/bin)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR}/release/lib)
ELSEIF(UNIX)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR}/lib)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR}/lib)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR}/bin)
ENDIF(WIN32)

ADD_EXECUTABLE(${OUTPUT} ${ALL_SRC})
#LINK_DIRECTORIES(${CMAKE_HOME_DIRECTORY}/common)
TARGET_LINK_LIBRARIES(${OUTPUT} common ${BOOST_LIBRARIES})

