CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS On)

PROJECT(client)
SET(OUTPUT client)
SET(OUTPUT_DIR ${CMAKE_BINARY_DIR}/output)
IF(WIN32)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR}/debug/lib)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR}/debug/lib)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR}/debug/bin)

    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR}/release/lib)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR}/release/bin)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR}/release/lib)
ELSEIF(UNIX)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR}/lib)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR}/lib)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR}/bin)
ENDIF(WIN32)



#### 源码工程目录
FILE(GLOB CLIENT	*.cpp *.h)
SOURCE_GROUP("" FILES ${CLIENT})
SOURCE_GROUP(TREE ${PROJECT_SOURCE_DIR} FILES ${CLIENT})

SET(SRC_LIST ${CLIENT}
    ${CLIENT_PROTO}
    ${CLIENT_PROTO_CLIENT}
    ${CLIENT_PROTO_OTHER}
    ${CLIENT_PROTO_SERVER}
    )


#### include dir
#INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
#INCLUDE_DIRECTORIES(${CMAKE_HOME_DIRECTORY})
INCLUDE_DIRECTORIES(${CMAKE_HOME_DIRECTORY}/src)


INCLUDE(${CMAKE_HOME_DIRECTORY}/cmake/FindBoost.cmake)
INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIR})

INCLUDE(${CMAKE_HOME_DIRECTORY}/cmake/FindSfml.cmake)
INCLUDE_DIRECTORIES(${SFML_INCLUDE_DIR})

#### third libraries
SET(THIRD_LIBRARIES
    ${BOOST_LIBRARIES}
    ${SFML_LIBRARIES}
    )

IF(WIN32)
    ADD_DEFINITIONS("/D _WIN32_WINNT=0x0601")
    ADD_DEFINITIONS(/std:c++17)
    ADD_DEFINITIONS("/D _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS")
    ADD_DEFINITIONS(/wd4251)    ### protocolbuf warning
    
    FIND_LIBRARY(LIB_BOOST_PROGRAM_OPTIONS boost_program_options-vc140-mt-gd.lib PATHS ${BOOST_LIBRARY_DIR})
    SET(THIRD_LIBRARIES ${THIRD_LIBRARIES} ${LIB_BOOST_PROGRAM_OPTIONS})
    
ELSEIF(UNIX)
    ADD_DEFINITIONS(-g -Wall -Wextra -Werror -std=c++17)
    ADD_DEFINITIONS(-DBOOST_LOG_DYN_LINK)
    SET(THIRD_LIBRARIES ${THIRD_LIBRARIES} pthread)
ENDIF()

##LINK_LIBRARIES(boost_log)
ADD_EXECUTABLE(${OUTPUT} ${SRC_LIST})
TARGET_LINK_LIBRARIES(${OUTPUT} ${THIRD_LIBRARIES})
