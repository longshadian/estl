// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto

#ifndef PROTOBUF_room_2eproto__INCLUDED
#define PROTOBUF_room_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pt {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_room_2eproto();
void protobuf_AssignDesc_room_2eproto();
void protobuf_ShutdownFile_room_2eproto();

class room_client;
class room_client_conf;
class room_server;
class room_server_conf;

// ===================================================================

class room_client : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pt.room_client) */ {
 public:
  room_client();
  virtual ~room_client();

  room_client(const room_client& from);

  inline room_client& operator=(const room_client& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_client& default_instance();

  void Swap(room_client* other);

  // implements Message ----------------------------------------------

  inline room_client* New() const { return New(NULL); }

  room_client* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_client& from);
  void MergeFrom(const room_client& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(room_client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // optional int32 min_gold = 2;
  void clear_min_gold();
  static const int kMinGoldFieldNumber = 2;
  ::google::protobuf::int32 min_gold() const;
  void set_min_gold(::google::protobuf::int32 value);

  // optional int32 max_gold = 3;
  void clear_max_gold();
  static const int kMaxGoldFieldNumber = 3;
  ::google::protobuf::int32 max_gold() const;
  void set_max_gold(::google::protobuf::int32 value);

  // optional int32 max_round = 4;
  void clear_max_round();
  static const int kMaxRoundFieldNumber = 4;
  ::google::protobuf::int32 max_round() const;
  void set_max_round(::google::protobuf::int32 value);

  // optional int32 ante = 5;
  void clear_ante();
  static const int kAnteFieldNumber = 5;
  ::google::protobuf::int32 ante() const;
  void set_ante(::google::protobuf::int32 value);

  // optional string time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string json_str = 7;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 7;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // @@protoc_insertion_point(class_scope:pt.room_client)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 min_gold_;
  ::google::protobuf::int32 max_gold_;
  ::google::protobuf::int32 max_round_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr json_str_;
  ::google::protobuf::int32 ante_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_room_2eproto();
  friend void protobuf_AssignDesc_room_2eproto();
  friend void protobuf_ShutdownFile_room_2eproto();

  void InitAsDefaultInstance();
  static room_client* default_instance_;
};
// -------------------------------------------------------------------

class room_client_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pt.room_client_conf) */ {
 public:
  room_client_conf();
  virtual ~room_client_conf();

  room_client_conf(const room_client_conf& from);

  inline room_client_conf& operator=(const room_client_conf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_client_conf& default_instance();

  void Swap(room_client_conf* other);

  // implements Message ----------------------------------------------

  inline room_client_conf* New() const { return New(NULL); }

  room_client_conf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_client_conf& from);
  void MergeFrom(const room_client_conf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(room_client_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pt.room_client data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::pt::room_client& data(int index) const;
  ::pt::room_client* mutable_data(int index);
  ::pt::room_client* add_data();
  ::google::protobuf::RepeatedPtrField< ::pt::room_client >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::pt::room_client >&
      data() const;

  // @@protoc_insertion_point(class_scope:pt.room_client_conf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pt::room_client > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_room_2eproto();
  friend void protobuf_AssignDesc_room_2eproto();
  friend void protobuf_ShutdownFile_room_2eproto();

  void InitAsDefaultInstance();
  static room_client_conf* default_instance_;
};
// -------------------------------------------------------------------

class room_server : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pt.room_server) */ {
 public:
  room_server();
  virtual ~room_server();

  room_server(const room_server& from);

  inline room_server& operator=(const room_server& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_server& default_instance();

  void Swap(room_server* other);

  // implements Message ----------------------------------------------

  inline room_server* New() const { return New(NULL); }

  room_server* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_server& from);
  void MergeFrom(const room_server& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(room_server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 min_gold = 2;
  void clear_min_gold();
  static const int kMinGoldFieldNumber = 2;
  ::google::protobuf::int32 min_gold() const;
  void set_min_gold(::google::protobuf::int32 value);

  // optional int32 max_gold = 3;
  void clear_max_gold();
  static const int kMaxGoldFieldNumber = 3;
  ::google::protobuf::int32 max_gold() const;
  void set_max_gold(::google::protobuf::int32 value);

  // optional int32 max_round = 4;
  void clear_max_round();
  static const int kMaxRoundFieldNumber = 4;
  ::google::protobuf::int32 max_round() const;
  void set_max_round(::google::protobuf::int32 value);

  // optional int32 ante = 5;
  void clear_ante();
  static const int kAnteFieldNumber = 5;
  ::google::protobuf::int32 ante() const;
  void set_ante(::google::protobuf::int32 value);

  // optional string time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional string json_str = 7;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 7;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // @@protoc_insertion_point(class_scope:pt.room_server)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 min_gold_;
  ::google::protobuf::int32 max_gold_;
  ::google::protobuf::int32 max_round_;
  ::google::protobuf::int32 ante_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr json_str_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_room_2eproto();
  friend void protobuf_AssignDesc_room_2eproto();
  friend void protobuf_ShutdownFile_room_2eproto();

  void InitAsDefaultInstance();
  static room_server* default_instance_;
};
// -------------------------------------------------------------------

class room_server_conf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pt.room_server_conf) */ {
 public:
  room_server_conf();
  virtual ~room_server_conf();

  room_server_conf(const room_server_conf& from);

  inline room_server_conf& operator=(const room_server_conf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const room_server_conf& default_instance();

  void Swap(room_server_conf* other);

  // implements Message ----------------------------------------------

  inline room_server_conf* New() const { return New(NULL); }

  room_server_conf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const room_server_conf& from);
  void MergeFrom(const room_server_conf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(room_server_conf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pt.room_server data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::pt::room_server& data(int index) const;
  ::pt::room_server* mutable_data(int index);
  ::pt::room_server* add_data();
  ::google::protobuf::RepeatedPtrField< ::pt::room_server >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::pt::room_server >&
      data() const;

  // @@protoc_insertion_point(class_scope:pt.room_server_conf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::pt::room_server > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_room_2eproto();
  friend void protobuf_AssignDesc_room_2eproto();
  friend void protobuf_ShutdownFile_room_2eproto();

  void InitAsDefaultInstance();
  static room_server_conf* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// room_client

// optional int32 roomid = 1;
inline void room_client::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 room_client::roomid() const {
  // @@protoc_insertion_point(field_get:pt.room_client.roomid)
  return roomid_;
}
inline void room_client::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:pt.room_client.roomid)
}

// optional int32 min_gold = 2;
inline void room_client::clear_min_gold() {
  min_gold_ = 0;
}
inline ::google::protobuf::int32 room_client::min_gold() const {
  // @@protoc_insertion_point(field_get:pt.room_client.min_gold)
  return min_gold_;
}
inline void room_client::set_min_gold(::google::protobuf::int32 value) {
  
  min_gold_ = value;
  // @@protoc_insertion_point(field_set:pt.room_client.min_gold)
}

// optional int32 max_gold = 3;
inline void room_client::clear_max_gold() {
  max_gold_ = 0;
}
inline ::google::protobuf::int32 room_client::max_gold() const {
  // @@protoc_insertion_point(field_get:pt.room_client.max_gold)
  return max_gold_;
}
inline void room_client::set_max_gold(::google::protobuf::int32 value) {
  
  max_gold_ = value;
  // @@protoc_insertion_point(field_set:pt.room_client.max_gold)
}

// optional int32 max_round = 4;
inline void room_client::clear_max_round() {
  max_round_ = 0;
}
inline ::google::protobuf::int32 room_client::max_round() const {
  // @@protoc_insertion_point(field_get:pt.room_client.max_round)
  return max_round_;
}
inline void room_client::set_max_round(::google::protobuf::int32 value) {
  
  max_round_ = value;
  // @@protoc_insertion_point(field_set:pt.room_client.max_round)
}

// optional int32 ante = 5;
inline void room_client::clear_ante() {
  ante_ = 0;
}
inline ::google::protobuf::int32 room_client::ante() const {
  // @@protoc_insertion_point(field_get:pt.room_client.ante)
  return ante_;
}
inline void room_client::set_ante(::google::protobuf::int32 value) {
  
  ante_ = value;
  // @@protoc_insertion_point(field_set:pt.room_client.ante)
}

// optional string time = 6;
inline void room_client::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& room_client::time() const {
  // @@protoc_insertion_point(field_get:pt.room_client.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_client::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.room_client.time)
}
inline void room_client::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.room_client.time)
}
inline void room_client::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.room_client.time)
}
inline ::std::string* room_client::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:pt.room_client.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* room_client::release_time() {
  // @@protoc_insertion_point(field_release:pt.room_client.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_client::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:pt.room_client.time)
}

// optional string json_str = 7;
inline void room_client::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& room_client::json_str() const {
  // @@protoc_insertion_point(field_get:pt.room_client.json_str)
  return json_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_client::set_json_str(const ::std::string& value) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.room_client.json_str)
}
inline void room_client::set_json_str(const char* value) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.room_client.json_str)
}
inline void room_client::set_json_str(const char* value, size_t size) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.room_client.json_str)
}
inline ::std::string* room_client::mutable_json_str() {
  
  // @@protoc_insertion_point(field_mutable:pt.room_client.json_str)
  return json_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* room_client::release_json_str() {
  // @@protoc_insertion_point(field_release:pt.room_client.json_str)
  
  return json_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_client::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    
  } else {
    
  }
  json_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:pt.room_client.json_str)
}

// -------------------------------------------------------------------

// room_client_conf

// repeated .pt.room_client data = 1;
inline int room_client_conf::data_size() const {
  return data_.size();
}
inline void room_client_conf::clear_data() {
  data_.Clear();
}
inline const ::pt::room_client& room_client_conf::data(int index) const {
  // @@protoc_insertion_point(field_get:pt.room_client_conf.data)
  return data_.Get(index);
}
inline ::pt::room_client* room_client_conf::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pt.room_client_conf.data)
  return data_.Mutable(index);
}
inline ::pt::room_client* room_client_conf::add_data() {
  // @@protoc_insertion_point(field_add:pt.room_client_conf.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pt::room_client >*
room_client_conf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pt.room_client_conf.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pt::room_client >&
room_client_conf::data() const {
  // @@protoc_insertion_point(field_list:pt.room_client_conf.data)
  return data_;
}

// -------------------------------------------------------------------

// room_server

// optional string name = 1;
inline void room_server::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& room_server::name() const {
  // @@protoc_insertion_point(field_get:pt.room_server.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_server::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.room_server.name)
}
inline void room_server::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.room_server.name)
}
inline void room_server::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.room_server.name)
}
inline ::std::string* room_server::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pt.room_server.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* room_server::release_name() {
  // @@protoc_insertion_point(field_release:pt.room_server.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_server::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pt.room_server.name)
}

// optional int32 min_gold = 2;
inline void room_server::clear_min_gold() {
  min_gold_ = 0;
}
inline ::google::protobuf::int32 room_server::min_gold() const {
  // @@protoc_insertion_point(field_get:pt.room_server.min_gold)
  return min_gold_;
}
inline void room_server::set_min_gold(::google::protobuf::int32 value) {
  
  min_gold_ = value;
  // @@protoc_insertion_point(field_set:pt.room_server.min_gold)
}

// optional int32 max_gold = 3;
inline void room_server::clear_max_gold() {
  max_gold_ = 0;
}
inline ::google::protobuf::int32 room_server::max_gold() const {
  // @@protoc_insertion_point(field_get:pt.room_server.max_gold)
  return max_gold_;
}
inline void room_server::set_max_gold(::google::protobuf::int32 value) {
  
  max_gold_ = value;
  // @@protoc_insertion_point(field_set:pt.room_server.max_gold)
}

// optional int32 max_round = 4;
inline void room_server::clear_max_round() {
  max_round_ = 0;
}
inline ::google::protobuf::int32 room_server::max_round() const {
  // @@protoc_insertion_point(field_get:pt.room_server.max_round)
  return max_round_;
}
inline void room_server::set_max_round(::google::protobuf::int32 value) {
  
  max_round_ = value;
  // @@protoc_insertion_point(field_set:pt.room_server.max_round)
}

// optional int32 ante = 5;
inline void room_server::clear_ante() {
  ante_ = 0;
}
inline ::google::protobuf::int32 room_server::ante() const {
  // @@protoc_insertion_point(field_get:pt.room_server.ante)
  return ante_;
}
inline void room_server::set_ante(::google::protobuf::int32 value) {
  
  ante_ = value;
  // @@protoc_insertion_point(field_set:pt.room_server.ante)
}

// optional string time = 6;
inline void room_server::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& room_server::time() const {
  // @@protoc_insertion_point(field_get:pt.room_server.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_server::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.room_server.time)
}
inline void room_server::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.room_server.time)
}
inline void room_server::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.room_server.time)
}
inline ::std::string* room_server::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:pt.room_server.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* room_server::release_time() {
  // @@protoc_insertion_point(field_release:pt.room_server.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_server::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:pt.room_server.time)
}

// optional string json_str = 7;
inline void room_server::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& room_server::json_str() const {
  // @@protoc_insertion_point(field_get:pt.room_server.json_str)
  return json_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_server::set_json_str(const ::std::string& value) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.room_server.json_str)
}
inline void room_server::set_json_str(const char* value) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.room_server.json_str)
}
inline void room_server::set_json_str(const char* value, size_t size) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.room_server.json_str)
}
inline ::std::string* room_server::mutable_json_str() {
  
  // @@protoc_insertion_point(field_mutable:pt.room_server.json_str)
  return json_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* room_server::release_json_str() {
  // @@protoc_insertion_point(field_release:pt.room_server.json_str)
  
  return json_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void room_server::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    
  } else {
    
  }
  json_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:pt.room_server.json_str)
}

// -------------------------------------------------------------------

// room_server_conf

// repeated .pt.room_server data = 1;
inline int room_server_conf::data_size() const {
  return data_.size();
}
inline void room_server_conf::clear_data() {
  data_.Clear();
}
inline const ::pt::room_server& room_server_conf::data(int index) const {
  // @@protoc_insertion_point(field_get:pt.room_server_conf.data)
  return data_.Get(index);
}
inline ::pt::room_server* room_server_conf::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pt.room_server_conf.data)
  return data_.Mutable(index);
}
inline ::pt::room_server* room_server_conf::add_data() {
  // @@protoc_insertion_point(field_add:pt.room_server_conf.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pt::room_server >*
room_server_conf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pt.room_server_conf.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pt::room_server >&
room_server_conf::data() const {
  // @@protoc_insertion_point(field_list:pt.room_server_conf.data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pt

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_room_2eproto__INCLUDED
