CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

IF(WIN32)
    MESSAGE(STATUS "CMAKE_VS_DEVENV_COMMAND: ${CMAKE_VS_DEVENV_COMMAND}")
    MESSAGE(STATUS "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION: ${CMAKE_VS_INTEL_Fortran_PROJECT_VERSION}")
    MESSAGE(STATUS "CMAKE_VS_MSBUILD_COMMAND: ${CMAKE_VS_MSBUILD_COMMAND}")
    MESSAGE(STATUS "CMAKE_VS_NsightTegra_VERSION: ${CMAKE_VS_NsightTegra_VERSION}")
    MESSAGE(STATUS "CMAKE_VS_PLATFORM_NAME: ${CMAKE_VS_PLATFORM_NAME}")
    MESSAGE(STATUS "CMAKE_VS_PLATFORM_TOOLSET: ${CMAKE_VS_PLATFORM_TOOLSET}")
    MESSAGE(STATUS "CMAKE_VS_PLATFORM_TOOLSET_CUDA: ${CMAKE_VS_PLATFORM_TOOLSET_CUDA}")
    MESSAGE(STATUS "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE: ${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE}")
    MESSAGE(STATUS "CMAKE_VS_PLATFORM_TOOLSET_VERSION: ${CMAKE_VS_PLATFORM_TOOLSET_VERSION}")
    MESSAGE(STATUS "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION: ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}")

ENDIF()

MESSAGE(STATUS "CMAKE_CL_64 ${CMAKE_CL_64}")
MESSAGE(STATUS "WIN32 ${WIN32}")
MESSAGE(STATUS "WIN64 ${WIN64}")
MESSAGE(STATUS "CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P}")


FUNCTION(CHECK_PLATFORM_SIZE argv)
    IF(${CMAKE_SIZEOF_VOID_P} STREQUAL "4")
        SET(${argv} "x86" PARENT_SCOPE)
    ELSE()
        SET(${argv} "x64" PARENT_SCOPE)
    ENDIF()
ENDFUNCTION()


#SET(PLATFORM_TARGET "")
CHECK_PLATFORM_SIZE(PLATFORM_TARGET)
MESSAGE(STATUS "PLATFORM_TARGET ${PLATFORM_TARGET}")

OPTION(VCPKG "use vcpkg " ON)
IF(VCPKG)
    FIND_PATH(VCPKG_DIR E:\\gitpro\\vcpkg\\installed
    #FIND_PATH(VCPKG_DIR
        PATHS
        C:\\
        NO_DEFAULT_PATH
    )

    SET(VCPKG_DIR E:\\gitpro\\vcpkg\\installed)
    MESSAGE("root VCPKG_DIR: ${VCPKG_DIR}")

    IF(NOT VCPKG_DIR)
        MESSAGE(FATAL_ERROR "Can't find VCPKG_DIR: ${VCPKG_DIR}")
    ELSE()
        MESSAGE(STATUS "Set VCPKG_DIR: ${VCPKG_DIR}")
    ENDIF()
ENDIF()

ADD_SUBDIRECTORY(src)

